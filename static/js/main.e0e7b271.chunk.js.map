{"version":3,"sources":["components/Table.js","components/Header.js","App.js","reportWebVitals.js","index.js"],"names":["Table","props","tableContent","arr1","val","tableValue","toLowerCase","len","length","count","i","j","indexOf","push","arr2","chunkSize","res","chunk","slice","sliceArray","tableRows","React","createElement","map","items","index","key","subItems","sIndex","charCount","className","Header","_useState","useState","_useState2","_slicedToArray","text","setText","_useState3","_useState4","errorMessage","setErrorMessage","_useState5","_useState6","setTableValue","useEffect","id","onSubmit","e","preventDefault","form","currentTarget","data","checkValidity","noValidate","type","value","onChange","target","required","onClick","setTimeout","App","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.e0e7b271.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Table = (props) => {\r\n\r\n    function charCount(props) {\r\n        const arr1 = [];\r\n        const val = props.tableValue.toLowerCase();\r\n        const len = props.tableValue.length;\r\n\r\n        let count = 0;\r\n\r\n        if (val !== \" \") {\r\n            for (let i = 0; i < len; i++) {\r\n                if (val[i] !== ' ') {\r\n                    for (let j = 0; j < len; j++) {\r\n                        if (val[i] === val[j]) {\r\n                            count += 1;\r\n                        }\r\n                    }\r\n                    if (arr1.indexOf(val[i]) === -1) {\r\n                        arr1.push(val[i], count);\r\n                    }\r\n                    count = 0;\r\n                }\r\n            }\r\n        }\r\n\r\n        function sliceArray(arr1, chunkSize) {\r\n            const res = [];\r\n            for (let i = 0; i < arr1.length; i += chunkSize) {\r\n                const chunk = arr1.slice(i, i + chunkSize);\r\n                res.push(chunk);\r\n            }\r\n            return res;\r\n        }\r\n        let arr2 = sliceArray(arr1, 2)\r\n\r\n        let tableRows = null;\r\n\r\n        if (arr1) {\r\n            tableRows = <tbody>\r\n                {arr2.map((items, index) => {\r\n                    return (\r\n                        <tr key={index}>\r\n                            {items.map((subItems, sIndex) => {\r\n                                return <td key={sIndex}> {subItems} </td>;\r\n                            })}\r\n                        </tr>\r\n                    );\r\n                })}\r\n            </tbody>\r\n        }\r\n        return tableRows;\r\n    }\r\n\r\n    const tableContent = charCount(props);\r\n\r\n    return (\r\n        <div>\r\n            <h5 className='table_caption'>Following is an example of a result that shows occurences/count:</h5>\r\n            <table>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Character</th>\r\n                        <th>Count</th>\r\n                    </tr>\r\n                </thead>\r\n                {tableContent}\r\n            </table>\r\n        </div>\r\n    );\r\n}\r\nexport default Table;\r\n\r\n// TO DO\r\n// 2. delete rows option - clear table contents\r\n// 7. table rows should display on click of button only - DONE\r\n// 9. table contents changing dynamically on adding/removing (only onclick of button the contents should show)\r\n// onChange?","import React, { useEffect, useState } from 'react';\r\nimport Table from './Table';\r\n\r\nconst Header = () => {\r\n    const [text, setText] = useState();\r\n    const [errorMessage, setErrorMessage] = useState('');\r\n    const [tableValue, setTableValue] = useState(false);\r\n    \r\n    useEffect(() => {\r\n        if(text !== \"\"){\r\n            setErrorMessage(\"\");\r\n        } else {\r\n            setErrorMessage(\"Please enter a word or sentence\");\r\n        }\r\n    },[text])\r\n\r\n    const handleSubmit= (e) => {\r\n        e.preventDefault();\r\n        const form = e.currentTarget;\r\n        const data = text;\r\n        if(!form.checkValidity()){\r\n            setErrorMessage(\"Please enter a word or sentence\");\r\n            setTableValue(false);\r\n        } else {\r\n            setErrorMessage(\"\");\r\n            setTableValue(data); \r\n        }\r\n    }\r\n\r\n    const handleClear = () => {\r\n        setText('');\r\n        setTimeout(() => {\r\n            setErrorMessage('');\r\n        })\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            <h2 className='centered'>Character Counter</h2>\r\n            <form className='centered' id='form' onSubmit={handleSubmit} noValidate>\r\n                <label>\r\n                    Enter a word or a sentence to find out number of occurance of a character<br/><br/>\r\n                </label>\r\n                <input type=\"text\" value={text || ''} onChange={(e) => setText(e.target.value)} required/> &nbsp;\r\n                <button>Get Count</button> &nbsp;\r\n                <button onClick={handleClear}>Clear</button>\r\n                {errorMessage && <p className='error centered'> {errorMessage} </p>}\r\n            </form>\r\n            {tableValue ? <Table tableValue={tableValue}/> : '' }\r\n        </div>\r\n    );\r\n} \r\n\r\nexport default Header;","import React from 'react';\nimport Header from './components/Header';\n// import Table from './components/Table';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div>\n      <Header/>\n      {/* <Table/> */}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}